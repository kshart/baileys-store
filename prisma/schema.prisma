// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Chat {
  pkId                      BigInt   @id @default(autoincrement())
  apiId                     String
  sessionId                 String
  id                        String
  createdAt                 BigInt?
  createdBy                 String?
  lastMsgTimestamp          BigInt?
  archived                  Boolean?
  messages                  Json?
  name                      String?
  displayName               String?
  description               String?
  notSpam                   Boolean?
  endOfHistoryTransfer      Boolean?
  endOfHistoryTransferType  Int?
  contactPrimaryIdentityKey Bytes?
  conversationTimestamp     BigInt?
  disappearingMode          Json?
  ephemeralExpiration       Int?
  ephemeralSettingTimestamp BigInt?
  isDefaultSubgroup         Boolean?
  isParentGroup             Boolean?
  lidJid                    String?
  markedAsUnread            Boolean?
  mediaVisibility           Int?
  muteEndTime               BigInt?
  newJid                    String?
  oldJid                    String?
  pHash                     String?
  parentGroupId             String?
  participant               Json?
  pinned                    Int?
  pnJid                     String?
  pnhDuplicateLidThread     Boolean?
  readOnly                  Boolean?
  shareOwnPn                Boolean?
  support                   Boolean?
  suspended                 Boolean?
  tcToken                   Bytes?
  tcTokenSenderTimestamp    BigInt?
  tcTokenTimestamp          BigInt?
  terminated                Boolean?
  unreadCount               Int?
  unreadMentionCount        Int?
  wallpaper                 Json?
  lastMessageRecvTimestamp  Int?
  commentsCount             Int?

  username      String?
  lidOriginType String?

  channel Channel @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageModels Message[]

  @@unique([sessionId, id], map: "unique_id_per_session_id_chat")
  @@index([sessionId])
  @@index([apiId])
}

model Contact {
  pkId         BigInt  @id @default(autoincrement())
  apiId        String
  sessionId    String
  id           String
  name         String?
  notify       String?
  verifiedName String?
  imgUrl       String?
  status       String?
  business     Json?

  channel Channel @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([sessionId, id], map: "unique_id_per_session_id_contact")
  @@index([sessionId])
  @@index([apiId])
}

model Message {
  pkId                            BigInt   @id @default(autoincrement())
  chatId                          BigInt? // У прилетевшего сообщения может не быть чата
  apiId                           String
  sessionId                       String
  remoteJid                       String
  id                              String
  agentId                         String?
  bizPrivacyStatus                Int?
  broadcast                       Boolean?
  clearMedia                      Boolean?
  duration                        Int?
  ephemeralDuration               Int?
  ephemeralOffToOn                Boolean?
  ephemeralOutOfSync              Boolean?
  ephemeralStartTimestamp         BigInt?
  finalLiveLocation               Json?
  futureproofData                 Bytes?
  ignore                          Boolean?
  keepInChat                      Json?
  key                             Json
  labels                          Json?
  mediaCiphertextSha256           Bytes?
  mediaData                       Json?
  message                         Json?
  messageC2STimestamp             BigInt?
  messageSecret                   Bytes?
  messageStubParameters           Json?
  messageStubType                 Int?
  messageTimestamp                BigInt?
  multicast                       Boolean?
  originalSelfAuthorUserJidString String?
  participant                     String?
  paymentInfo                     Json?
  photoChange                     Json?
  pollAdditionalMetadata          Json?
  pollUpdates                     Json?
  eventResponses                  Json?
  pushName                        String?
  quotedPaymentInfo               Json?
  quotedStickerData               Json?
  reactions                       Json?
  revokeMessageTimestamp          BigInt?
  starred                         Boolean?
  status                          Int?
  statusAlreadyViewed             Boolean?
  statusPsa                       Json?
  urlNumber                       Boolean?
  urlText                         Boolean?
  userReceipt                     Json?
  verifiedBizName                 String?
  reportingTokenInfo              Json?

  channel Channel @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat Chat? @relation(fields: [chatId], references: [pkId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([sessionId, remoteJid, id], map: "unique_message_key_per_session_id")
  @@index([sessionId])
  @@index([apiId])
  @@index([chatId])
  @@index([messageTimestamp])
}

model Session {
  pkId      BigInt @id @default(autoincrement())
  sessionId String
  id        String
  data      String @db.Text

  channel Channel @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([sessionId, id], map: "unique_id_per_session_id_session")
  @@index([sessionId])
}

model Channel {
  id                 String @id
  contactId          String?
  state              ChannelState
  name               String
  type               String
  authenticationData Json?
  createdAt          DateTime @default(now())

  sessions Session[]
  messages Message[]
  contacts Contact[]
  chats    Chat[]
  webhooks Webhook[]
}

model Webhook {
  id           Int @id @default(autoincrement())
  channelId    String
  url          String
  createdAt    DateTime @default(now())
  lastStatus   Int?
  lastError    Json?
  lastErrorAt  DateTime?

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([url, channelId], map: "unique_webhook_key")
}

enum ChannelState {
  active // Пользователь залогинен
  authentication // Идет процесс привязки, данные для привязки хранятся в authenticationData
  logout // Пользователь отвязал устройство
  removed // Канал удален из шлюза
}
